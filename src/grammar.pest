prog = { SOI ~ function_decl_list ~ stmt_list ~ EOI }

function_decl_list = { function_decl* }
function_decl      = { type ~ ident ~ "(" ~ argument_list ~ ")" ~ braced_stmts }
argument           = { type ~ ident }
argument_list      = { (argument ~ ("," ~ argument)*)? }

stmt         = _{ assignment | declaration | while | write | return | if | discard_fn_call }
stmt_list    =  { stmt+ }
braced_stmts = _{ "{" ~ stmt_list ~ "}" }

declaration = { type ~ ident ~ ("=" ~ expr)? ~ ";" }
assignment  = { ident ~ "=" ~ expr ~ ";" }
while       = { "tantque" ~ "(" ~ expr ~ ")" ~ braced_stmts }
write       = { "ecrire" ~ "(" ~ expr ~ ")" ~ ";" }
if          = { "si" ~ "(" ~ expr ~ ")" ~ braced_stmts ~ ("sinon" ~ (braced_stmts | if))? }
return      = { "retourner" ~ expr ~ ";" }
discard_fn_call = { function_call ~ ";" }

type = { "entier" | "booleen" }

expr      = { prefix? ~ primary ~ (infix ~ prefix? ~ primary)* }
expr_list = { (expr ~ ("," ~ expr)*)? }

infix = _{ add | sub | mul | div | pow | mod | eq | neq | lte | gte | lt | gt | logic_and | logic_or }
add   =  { "+" }
sub   =  { "-" }
mul   =  { "*" }
div   =  { "/" }
pow   =  { "^" }
mod   =  { "%" }
eq    =  { "==" }
neq   =  { "!=" }
lte   =  { "<=" }
gte   =  { ">=" }
lt    =  { "<" }
gt    =  { ">" }
logic_and = { "et" }
logic_or  = { "ou" }

prefix       = _{ neg | logic_not }
neg          =  { "-" }
logic_not    =  { "non" }

primary       = _{ integer | boolean | read | function_call | ident | "(" ~ expr ~ ")" }
integer       = @{ ASCII_DIGIT+ }
boolean       =  { "Vrai" | "Faux" }
read          =  { "lire" ~ "(" ~ ")" }
function_call =  { ident ~ "(" ~ expr_list ~ ")" }

ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
